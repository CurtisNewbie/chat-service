# change spring boot's root log level
logging.level.root=INFO

# server's port, making it 8443 will somehow imply a SSL connection
# which forces the frontend (e.g., ng serve) to enable SSL, tho
# the ssl is in fact disabled below, so we might just use 8080 instead.
server.port=8081

# ------------------ redis ---------------------------------------------
redisson-config=redisson-dev.yaml

# ------------------ datasource ----------------------------------------
spring.datasource.url=jdbc:mysql://localhost:3306/fileServer?serverTimezone=Asia/Shanghai
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# ------------------ RabbitMQ -----------------------------------
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
spring.rabbitmq.virtualHost=/

# --------------------------------
#
# auth-module related
#
# --------------------------------
# enable customized cors filter
authmodule.cors.is-filter-enabled=true
# customize cors allow origin
authmodule.cors.allow-origin=http://127.0.0.1:4200
# customize cors allow methods
authmodule.cors.allow-methods=GET,PUT,POST,DELETE,OPTION
# customize cors allow credential (true/false)
authmodule.cors.allow-credential=true
# customer cors allow headers
authmodule.cors.allow-headers=content-type, x-gwt-module-base, x-gwt-permutation, clientid, longpush, set-cookie
# enable operate log
authmodule.enable-operate-log=false

# ------------------ distributed-task-module ------------------
distributed-task-module.enabled=true
distributed-task-module.application-group=chat-service

# ----------------- web-socket --------------------------------
websocket.allowed-origins=http://localhost:4200,http://localhost:8004,http://127.0.0.1:8004,http://127.0.0.1:4200

# console logging for controllers
controller-console-logging=false
